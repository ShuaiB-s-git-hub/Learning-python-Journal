# 工程创建人：袁某
# 创作时间： 2022/10/15 21:05

# 变量的定义和使用
# python是一种描述性的语言，不需要声明变量类型，直接就 变量名=值  就完事儿了。剩下的都由编译器完成，如：
name='袁博鑫'   #实际上name中存的是该变量的内存地址
# 变量由三部分组成
#
# 标识:表示对象所存储的内存地址,使用内置函数id(obj)来获取
print('标识',id(name))
# 类型:表示的是对象的数据类型,使用内置函数type(obj)来获取
print('类型',type(name))
# 值:表示对象所存储的具体数据,使用print(obj)可以将值进行打印输出
print(name)


#变量的多次赋值
#与c/c++的值机制不同，python的变量名本质上是指针，当python的变量名被重新赋值后，会指向新值的空间，旧值会被python的垃圾回收器回收
#代码接上文：name='袁博鑫'
name='混子居士'
print(name) #结果为 混子居士


# 常用的数据类型整数类型
# 整数类形 int → 98
# 浮点数类型 float → 3.14159
# 布尔类型 bool → True ,False
# 字符串类型 str → '人生苦短,我用Python'

#整形的表示方式：
#十进制→默认的进制
# 二进制→以Ob开头  0b0111010101
# 八进制→以0o开头  0o74562147
# 十六进制→0x开头  0xafg588970
num=0xaf588970    #十进制：2941815152
print(num)        #事实证明，这个函数不管这个数多少进制，默认打印十进制数


# 浮点类型
#
# 浮点数整数部分和小数部分组成浮点数存储不精确性
#
# 使用浮点数进行计算时,可能会出现小数位数不确定的情况,这是因为浮点数在计算机中是以二进制存储的，就可能会造成这种情况
print(1.1+2.2) #3.3000000000000003
#并不是所有浮点数加法都这样
print(1.1+2.1) #3.2
#
# 解决方案
# 导入模块decimal
from decimal import Decimal  #这块代码现在理解起来有点难度，会在后面的学习中提到
print(Decimal('1.1')+Decimal('2.2')) #3.3


# 布尔类型
# 用来表示真或假的值True表示真（1）, False（0）表示假
f1=True
f2=False
print('type',type(f1))
print('type',type(f2))

# 布尔值可以转化为整数,甚至可以直接进行整形运算（运算后数据类型发生改变，但是不需要你来转变，这活编译器就帮你干了）
print(f1+1) #2
print(f2+1) #1
print('type',type(f1+1))
print('type',type(f2+1))


# 字符串类型
#
# 字符串又被称为不可变的字符序列
#
# 可以使用单引号''双引号""三引号""" """或''' ''',来定义
#
# 单引号和双引号定义的字符串必须在一行三引号定义的字符串可以分布在连续的多行
str1='人生苦短,我用Python'
str2="人生苦短,我用Python"
str3="人生苦短,我用Python"
str4='''人生苦短
我用Python'''            #打印效果：每一行都左对齐
print(str1)
print(str2)
print(str3)
print(str4)


